const QI = {
  QI: {
    'Виды тестирования': {
      id: '81',
      title: 'Виды тестирования',
      jsx: (
        <div>
          <ul>
            По запуску кода:
            <li>
              {' '}
              <b>Статическое</b> - без запуска кода, тестирование требований,
              code review
            </li>
            <li>
              {' '}
              <b>Динамическое</b> - проводится при помощи запуска продукта,
              например юнит тестирование
            </li>
          </ul>
          <ul>
            По знанию внутренностей системы:
            <li>
              {' '}
              <b>Черный ящик</b> - пользовательское тестирование, когда
              тестировщик не знает внутренний код
            </li>
            <li>
              {' '}
              <b>Белый ящик</b> - используется тестировщиком, который знает
              програмный код
            </li>
            <li>
              {' '}
              <b>Серый ящик</b> - это подход, сочетающий элементы черного и
              белого ящика. Тестировщик имеет частичный доступ к данным,
              допустим имеет доступ к базе данных, и может создать тестового
              пользователя или тестовый платеж
            </li>
          </ul>
          <ul>
            По объекту (цели) тестирования:
            <li>
              <b>Функциональное тестирование</b> - проверяет, правильно ли
              выполняет ПО функции, описанные в требованиях, а также как
              выполняется взаимодействие с другими системами. К этому виду
              тестирования относятся модульное, интеграционное и системное
              тестирование:
              <ul>
                <li>
                  <b>Тестирование безопасности</b> - это множество вещей, суть
                  которых заключается в том, чтобы усложнить условия для кражи
                  данных, денег, информации
                </li>
                <li>
                  <b>Тестирование взаимодействия</b> - это проверка
                  взаимодействия ПО с различными внешними компонентами и
                  системами. Например, можно ли использовать сервис авторизации
                  «Вконтакте» для регистрации на сторонних сайтах
                </li>
              </ul>
            </li>
            <li>
              <b>Нефункциональное тестирование</b> - описывает тесты,
              необходимые для определения характеристик программного
              обеспечения, которые могут быть измерены различными величинами. В
              целом это тестирование того, как система работает:
              <ul>
                <li>
                  <b>Нагрузочное тестирование</b> - как быстро работает сайт под
                  нагрузкой
                </li>
                <li>
                  <b>Стресс-тестирование</b> - тестирование, которое позволяет
                  проверить, насколько приложение и система в целом
                  работоспособны в условиях стресса. Оценивается и способность к
                  регенерации, то есть возвращению к нормальному состоянию после
                  стресса (повышения интенсивности выполнения операций до очень
                  высоких значений).
                </li>
                <li>
                  <b>Тестирование стабильности и надежности</b> - проверка
                  работоспособности приложения при длительном (многочасовом)
                  тестировании со средним уровнем нагрузки
                </li>
                <li>
                  <b>Юзабилити-тестирование</b> - оценка ПО с точки зрения
                  удобства использования пользователями
                </li>
              </ul>
            </li>
            <li>
              <b>Связанное с изменениями в коде</b> - после внесения изменений
              (исправления бага/дефекта) программное обеспечение должно быть
              протестировано заново для подтверждения, что проблема
              действительно решена. Например фиксится 1 баг, и нужно проверить
              что фикс этого бага не сломал всю остальную систему:
              <ul>
                <li>
                  <b>Дымовое тестирование</b> - проверка основного функционала,
                  чтобы убедиться, что дальнейшее тестирование
                  возможно(регистрация и вход на сайт)
                </li>
                <li>
                  <b>Регрессионное тестирование</b> - это вид тестирования,
                  направленный на проверку изменений, сделанных в приложении или
                  окружающей среде (починка дефекта, слияние кода, миграция на
                  другую операционную систему, базу данных, веб-сервер или
                  сервер
                </li>
              </ul>
            </li>
          </ul>
          <ul>
            По степети автоматизации:
            <li>
              <b>Ручное тестирование</b> - это исполнение тест-кейсов без помощи
              каких-либо программ, автоматизирующих вашу работу
            </li>
            <li>
              <b>﻿﻿Автоматизированное тестирование</b> - используются
              программные средства для выполнения тестов и проверки результатов.
              Применение автоматизированных тестов позволяет сократить время
              тестирования и упростить сам процесс. Однако не стоит думать, что
              автоматизация - это просто, и все тесты нужно сделать
              автоматизированными
            </li>
          </ul>
          <ul>
            По степени важности тестируемых функций:
            <li>
              <b>Дымовое тестирование</b> - это минимальный набор тестов на
              явные ошибки. Его успешное прохождение говорит о том, что ПО можно
              тестировать более глубоко и основательно. Если ПО не прошло
              smoke-тестирование - то проверять дальше нет смысла
            </li>
            <li>
              <b>Тестирование критического пути</b> - это проверка
              функциональности, используемой пользователями повседневно,
              наиболее часто используемых функций ПО
            </li>
            <li>
              <b>﻿﻿Расширенное тестирование</b> - направлено на исследование
              всей заявленной в требованиях функциональности - даже той, которая
              низко проранжирована по степени важности. При этом здесь также
              учитывается, какая функциональность является более важной, а какая
              - менее важной
            </li>
          </ul>
          <ul>
            По критерию позитивности сценариев:
            <li>
              <b>При позитивном тестировании</b> - проверяются функции ПО строго
              по требованиям и инструкциям, только с допустимыми действиями и
              корректными данными
            </li>
            <li>
              <b>Негативное тестирование</b> - это проверка поведения ПО при
              вводе некорректных данных. Рассматривается то, что не
              предусмотрено требованиями или типом данных
            </li>
          </ul>
        </div>
      ),
    },
    'Тестирование карандаша': {
      id: '82',
      title: 'Тестирование карандаша',
      jsx: (
        <div>
          <ul>
            <li>
              Первое с чего стоит начать - это{' '}
              <span>попросить требования на карандаш</span> (цвет, твердость,
              форма)
            </li>
            <li>
              Начинать следует с <b>позитивных тестов</b>: убедиться, что его
              можно заточить, что им можно писать, стирает ли резинка
            </li>
            <li>
              Переходим к <b>негативным тестам</b>: будет ли писать на мокрой
              бумаге, на стене
            </li>
            <li>
              <b>Юзабилити тестирование</b>: Удобно ли держится в руке, за ухом,
              не скатывается ли со стола
            </li>
            <li>
              <b>Нагрузочное тестирование</b>: надавить на карандаш с силой и
              писать, но так чтобы он не сломался, провести так некоторое время
              и посмотреть, что будет с карандашом
            </li>
            <li>
              <b>Стресс-тестирование</b> - с силой ударить карандашом об стол,
              посмотреть выдержим ли грифель удар
            </li>
          </ul>
        </div>
      ),
    },
    'Цикл разработки': {
      id: '83',
      title: 'Цикл разработки',
      jsx: (
        <div>
          <p>
            <b>Цикл разработки</b> - это путь от идеи до поддержки готового
            продукта.
          </p>
          <ul>
            Состоит из:
            <li>
              <b>Идея</b>
            </li>
            <li>
              <b>Дизайн и документация</b>
            </li>
            <li>
              <b>Кодирование</b>
            </li>
            <li>
              <b>Тестирование и ремонт</b>
            </li>
            <li>
              <b>Релиз</b>
            </li>
          </ul>
          <p>
            <b>Идея</b> - описание цели. Занимаются этим обычно маркетологи или
            руководство
          </p>
          <p>
            <b>Дизайн</b> - это описание пути к достижению цели. На этом этапе
            разрабатываются требования и целевой дизайн-то как продукт должен
            выглядеть. Разработкой требований и спецификаций занимаются
            аналитики
          </p>
          <p>
            <b>Кодирование</b> - этап разработки ПО, задействованы программисты
          </p>
          <p>
            <b>Тестирование и ремонт</b> - этап начала тестирования, чем раньше
            - тем лучше, потому-что стоимость исправления бага со временем
            только возрастает
          </p>
          <p>
            <b>Релиз</b> - выпуск продукта реальным пользователям
          </p>
        </div>
      ),
    },
  },
}

export default QI
