const QI = {
  QI: {
    'Виды тестирования': {
      id: '81',
      title: 'Виды тестирования',
      jsx: (
        <div>
          <ul>
            По запуску кода:
            <li>
              {' '}
              <b>Статическое</b> - без запуска кода, тестирование требований,
              code review
            </li>
            <li>
              {' '}
              <b>Динамическое</b> - проводится при помощи запуска продукта,
              например юнит тестирование
            </li>
          </ul>
          <ul>
            По знанию внутренностей системы:
            <li>
              {' '}
              <b>Черный ящик</b> - пользовательское тестирование, когда
              тестировщик не знает внутренний код
            </li>
            <li>
              {' '}
              <b>Белый ящик</b> - используется тестировщиком, который знает
              програмный код
            </li>
            <li>
              {' '}
              <b>Серый ящик</b> - это подход, сочетающий элементы черного и
              белого ящика. Тестировщик имеет частичный доступ к данным,
              допустим имеет доступ к базе данных, и может создать тестового
              пользователя или тестовый платеж
            </li>
          </ul>
          <ul>
            По объекту (цели) тестирования:
            <li>
              <b>Функциональное тестирование</b> - проверяет, правильно ли
              выполняет ПО функции, описанные в требованиях, а также как
              выполняется взаимодействие с другими системами. К этому виду
              тестирования относятся модульное, интеграционное и системное
              тестирование:
              <ul>
                <li>
                  <b>Тестирование безопасности</b> - это множество вещей, суть
                  которых заключается в том, чтобы усложнить условия для кражи
                  данных, денег, информации
                </li>
                <li>
                  <b>Тестирование взаимодействия</b> - это проверка
                  взаимодействия ПО с различными внешними компонентами и
                  системами. Например, можно ли использовать сервис авторизации
                  «Вконтакте» для регистрации на сторонних сайтах
                </li>
              </ul>
            </li>
            <li>
              <b>Нефункциональное тестирование</b> - описывает тесты,
              необходимые для определения характеристик программного
              обеспечения, которые могут быть измерены различными величинами. В
              целом это тестирование того, как система работает:
              <ul>
                <li>
                  <b>Нагрузочное тестирование</b> - как быстро работает сайт под
                  нагрузкой
                </li>
                <li>
                  <b>Стресс-тестирование</b> - тестирование, которое позволяет
                  проверить, насколько приложение и система в целом
                  работоспособны в условиях стресса. Оценивается и способность к
                  регенерации, то есть возвращению к нормальному состоянию после
                  стресса (повышения интенсивности выполнения операций до очень
                  высоких значений)
                </li>
                <li>
                  <b>Тестирование стабильности и надежности</b> - проверка
                  работоспособности приложения при длительном (многочасовом)
                  тестировании со средним уровнем нагрузки
                </li>
                <li>
                  <b>Юзабилити-тестирование</b> - оценка ПО с точки зрения
                  удобства использования пользователями
                </li>
              </ul>
            </li>
            <li>
              <b>Связанное с изменениями в коде</b> - после внесения изменений
              (исправления бага/дефекта) программное обеспечение должно быть
              протестировано заново для подтверждения, что проблема
              действительно решена. Например фиксится 1 баг, и нужно проверить
              что фикс этого бага не сломал всю остальную систему:
              <ul>
                <li>
                  <b>Дымовое тестирование</b> - проверка основного функционала,
                  чтобы убедиться, что дальнейшее тестирование
                  возможно(регистрация и вход на сайт)
                </li>
                <li>
                  <b>Регрессионное тестирование</b> - это вид тестирования,
                  направленный на проверку изменений, сделанных в приложении или
                  окружающей среде (починка дефекта, слияние кода, миграция на
                  другую операционную систему, базу данных, веб-сервер или
                  сервер
                </li>
              </ul>
            </li>
          </ul>
          <ul>
            По степети автоматизации:
            <li>
              <b>Ручное тестирование</b> - это исполнение тест-кейсов без помощи
              каких-либо программ, автоматизирующих вашу работу
            </li>
            <li>
              <b>﻿﻿Автоматизированное тестирование</b> - используются
              программные средства для выполнения тестов и проверки результатов.
              Применение автоматизированных тестов позволяет сократить время
              тестирования и упростить сам процесс. Однако не стоит думать, что
              автоматизация - это просто, и все тесты нужно сделать
              автоматизированными
            </li>
          </ul>
          <ul>
            По степени важности тестируемых функций:
            <li>
              <b>Дымовое тестирование</b> - это минимальный набор тестов на
              явные ошибки. Его успешное прохождение говорит о том, что ПО можно
              тестировать более глубоко и основательно. Если ПО не прошло
              smoke-тестирование - то проверять дальше нет смысла
            </li>
            <li>
              <b>Тестирование критического пути</b> - это проверка
              функциональности, используемой пользователями повседневно,
              наиболее часто используемых функций ПО
            </li>
            <li>
              <b>﻿﻿Расширенное тестирование</b> - направлено на исследование
              всей заявленной в требованиях функциональности - даже той, которая
              низко проранжирована по степени важности. При этом здесь также
              учитывается, какая функциональность является более важной, а какая
              - менее важной
            </li>
          </ul>
          <ul>
            По критерию позитивности сценариев:
            <li>
              <b>При позитивном тестировании</b> - проверяются функции ПО строго
              по требованиям и инструкциям, только с допустимыми действиями и
              корректными данными
            </li>
            <li>
              <b>Негативное тестирование</b> - это проверка поведения ПО при
              вводе некорректных данных. Рассматривается то, что не
              предусмотрено требованиями или типом данных
            </li>
          </ul>
        </div>
      ),
    },
    'Тестирование карандаша': {
      id: '82',
      title: 'Тестирование карандаша',
      jsx: (
        <div>
          <ul>
            <li>
              Первое с чего стоит начать - это{' '}
              <span>попросить требования на карандаш</span> (цвет, твердость,
              форма)
            </li>
            <li>
              Начинать следует с <b>позитивных тестов</b>: убедиться, что его
              можно заточить, что им можно писать, стирает ли резинка
            </li>
            <li>
              Переходим к <b>негативным тестам</b>: будет ли писать на мокрой
              бумаге, на стене
            </li>
            <li>
              <b>Юзабилити тестирование</b>: удобно ли держится в руке, за ухом,
              не скатывается ли со стола
            </li>
            <li>
              <b>Нагрузочное тестирование</b>: надавить на карандаш с силой и
              писать, но так чтобы он не сломался, провести так некоторое время
              и посмотреть, что будет с карандашом
            </li>
            <li>
              <b>Стресс-тестирование</b> - с силой ударить карандашом об стол,
              посмотреть выдержим ли грифель удар
            </li>
          </ul>
        </div>
      ),
    },
    'Цикл разработки': {
      id: '83',
      title: 'Цикл разработки',
      jsx: (
        <div>
          <p>
            <b>Цикл разработки</b> - это путь от идеи до поддержки готового
            продукта.
          </p>
          <ul>
            Состоит из:
            <li>
              <b>Идея</b>
            </li>
            <li>
              <b>Дизайн и документация</b>
            </li>
            <li>
              <b>Кодирование</b>
            </li>
            <li>
              <b>Тестирование и ремонт</b>
            </li>
            <li>
              <b>Релиз</b>
            </li>
          </ul>
          <p>
            <b>Идея</b> - описание цели. Занимаются этим обычно маркетологи или
            руководство
          </p>
          <p>
            <b>Дизайн</b> - это описание пути к достижению цели. На этом этапе
            разрабатываются требования и целевой дизайн-то как продукт должен
            выглядеть. Разработкой требований и спецификаций занимаются
            аналитики
          </p>
          <p>
            <b>Кодирование</b> - этап разработки ПО, задействованы программисты
          </p>
          <p>
            <b>Тестирование и ремонт</b> - этап начала тестирования, чем раньше
            - тем лучше, потому-что стоимость исправления бага со временем
            только возрастает
          </p>
          <p>
            <b>Релиз</b> - выпуск продукта реальным пользователям
          </p>
        </div>
      ),
    },
    'Методология разработки': {
      id: '84',
      title: 'Методология разработки',
      jsx: (
        <div>
          <p>
            <b>Методология разработки ПО</b> - это система принципов, а также
            совокупность идей, понятий, методов, способов и средств,
            определяющих стиль разработки ПО.
          </p>
          <ul>
            Наиболее популярные модели разработки ПО:
            <li>
              <b>Каскадная модель</b> - модель разбивает жизненный цикл ПО на
              стадии: проектирование, дизайн, кодирование, тестирование,
              поддержка. Каждая стадия должна завершиться до начала следующей
            </li>
            <li>
              <b>Agile-подходы</b> - это семейство «гибких» подходов к
              разработке программного обеспечения. В гибкой методологии
              разработки после каждой итерации заказчик может наблюдать
              результат и понимать, удовлетворяет он его или нет. Это одно из eе
              преимуществ. К недостаткам относят то, что из-за отсутствия
              конкретных формулировок результатов сложно оценить
              трудозатратность и стоимость разработки. В основе гибкой
              методологии лежат непродолжительные отрезки времени <b>Sprint</b>,
              во-время которых выполняется определенный (ограниченный) список
              задач, ежедневные встречи <b>Stand-up meeting</b> и регулярные
              собрания (планирование спринта, итоги спринта). На ежедневных
              совещаниях участники команды обсуждают:
              <ul>
                <li>
                  Отчет о проделанной работе с момента последнего{' '}
                  <b>Stand-up meeting</b>
                </li>
                <li>
                  Список задач, которые сотрудник должен выполнить до следующего
                  собрания
                </li>
                <li>Затруднения, возникшие в ходе работы</li>
              </ul>
              Методология подходит для больших или нацеленных на длительный
              жизненный цикл проектов, постоянно адаптируемых к условиям рынка.
              Соответственно, в процессе реализации требования изменяются.
            </li>
          </ul>
          <p>
            <b>Agile</b> и <b>Каскадная модель</b>, различия:
          </p>
          <ul>
            <li>
              В <b>Каскадной модели</b> четко и заранее определены требования, в{' '}
              <b>Agile</b> требования в процессе реализации меняются
            </li>
            <li>
              В <b>Agile</b> плавающее значение стоимости продукта, в{' '}
              <b>Каскадной модели</b> - фиксированная стоимость
            </li>
            <li>
              В <b>Agile</b> готовность к изменениям в процессе разработки
              важнее, чем беспрекословное следование изначальному плану, в
              отличии от методологии <b>Каскадная модель</b>
            </li>
            <li>
              B <b>Agile</b> разработка через короткие итерации, в{' '}
              <b>Каскадной модели</b> - длительная разработка
            </li>
            <li>
              В <b>Agile</b> заказчик привлекается к процессу разработки
              продукта, в <b>Каскадной модели</b> - нет
            </li>
            <li>
              Приоритет в <b>Agile</b> - удовлетворение потребностей заказчика,
              в <b>Каскадной модели</b> - жёсткая последовательность этапов
              разработки
            </li>
          </ul>
        </div>
      ),
    },
    'Аксиомы тестирования': {
      id: '85',
      title: 'Аксиомы тестирования',
      jsx: (
        <div>
          <p>
            <b>Аксиомы тестирования</b> - в тестировании имеются свои
            непреложные истины, хотя оно и не является наукой в строгом смысле.
          </p>
          <ul>
            <li>
              <b>Тестирование не доказывает отсутствия ошибок.</b> Тестирование
              помогает выявить присутствие и характер дефектов, но успешное
              завершение всех тестов не доказывает, что дефектов нет
            </li>
            <li>
              <b>Исчерпывающее тестирование невозможно.</b> Экстремальными
              ответами, очевидно, являются «не тестировать ничего» и
              «протестировать все, поэтому нужно выбирать золотую середину
            </li>
            <li>
              <b>Раннее тестирование.</b> Чем раньше обнаружен дефект, тем
              быстрее, проще и дешевле его исправить
            </li>
            <li>
              <b>Скопление дефектов.</b> Многие тестировщики наблюдали такой
              эффект - дефекты «кучкуются» (распределены по коду неравномерно).
              Это может происходить потому, что определенная область кода
              особенно сложна и запутана, или потому, что внесение изменений
              вызывает «эффект домино».
            </li>
            <li>
              <b>Парадокс пестицидов.</b> Если повторять те же тесты снова и
              снова, в какой-то момент этот набор тестов перестанет выявлять
              новые дефекты. Поэтому важно менять тестовое покрытие, не
              пользоваться одними и теми же тест кейсами
            </li>
            <li>
              <b>Тестирование зависит от контекста.</b> Разные системы связаны с
              различными уровнями риска, влияние того или иного дефекта также
              сильно варьируется. Одни проблемы довольно тривиальны, другие
              могут дорого обойтись и привести к большим потерям денег, времени,
              деловой репутации
            </li>
            <li>
              <b>Заблуждение об отсутствии ошибок.</b> Если построенная система
              неудобна для использования пользователями и не соответствует их
              нуждам и ожиданиям, нахождение и исправление дефектов в ней
              бесполезно
            </li>
          </ul>
        </div>
      ),
    },
    API: {
      id: '86',
      title: 'API',
      jsx: (
        <div>
          <p>
            <b>API</b> — посредник, который позволяет двум приложениям
            взаимодействовать друг с другом.
          </p>
          <p>
            <b>SOAP API</b> – клиент и сервер обмениваются сообщениями
            посредством XML. Это менее гибкий API, который был более популярен в
            прошлом.
          </p>
          <p>
            <b>RPC API</b> - такие API называются системой удаленного вызова
            процедур. Клиент выполняет функцию (или процедуру) на сервере, и
            сервер отправляет результат обратно клиенту.
          </p>
          <p>
            <b>Websocket API</b> – это еще одна современная разработка web API,
            которая использует объекты JSON для передачи данных. WebSocket API
            поддерживает двустороннюю связь между клиентскими приложениями и
            сервером.
          </p>
          <p>
            <b>REST API</b> - это самые популярные и гибкие API-интерфейсы в
            Интернете. Клиент отправляет запросы на сервер в виде данных. Сервер
            использует этот клиентский ввод для запуска внутренних функций и
            возвращает выходные данные обратно клиенту.
          </p>
          <p>
            <b>REST</b> – это Representational State Transfer, т. е. передача
            репрезентативного состояния. <b>REST</b> определяет набор функций,
            таких как <b>GET</b>, <b>PUT</b>, <b>DELETE</b> и т. д., которые
            клиенты могут использовать для доступа к данным сервера. Клиенты и
            серверы обмениваются данными по протоколу HTTP.
          </p>
          <p>
            <b>Интеграции API</b> – это программные компоненты, которые
            автоматически обновляют данные между клиентами и серверами.
          </p>
          <ul>
            Стратегии тестирования API аналогичны другим методологиям
            тестирования ПО. Основное внимание уделяется проверке ответов
            сервера. А именно:
            <li>
              Выполнение нескольких запросов к адресам API для тестирования
              производительности
            </li>
            <li>
              Написание модульных тестов для проверки бизнес-логики и
              функциональной корректности
            </li>
            <li>Тестирование безопасности путем имитации системных атак</li>
          </ul>
        </div>
      ),
    },
    'Чек лист, тест кейс, баг репорт': {
      id: '87',
      title: 'Чек лист, тест кейс, баг репорт',
      jsx: (
        <div>
          <p>
            <b>Чек лист</b>
          </p>
          <table>
            <thead>
              <tr>
                <th>Список проверок</th>
                <th>Статус</th>
                <th>Устройство</th>
                <th>Среда</th>
                <th>Доп. информация(дефекты)</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Логин</td>
                <td>fail</td>
                <td>ПК</td>
                <td>Windows 10</td>
                <td>Не принимает логин</td>
              </tr>
              <tr>
                <td>Пароль</td>
                <td>Ok</td>
                <td></td>
                <td></td>
                <td></td>
              </tr>
              <tr>
                <td>Отправка писем</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
              </tr>
              <tr>
                <td>Письмо с вложением</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
              </tr>
              <tr>
                <td>Пустое письмо</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
              </tr>
            </tbody>
          </table>
          <p>
            <b>Тест Кейс</b>
          </p>
          <table>
            <thead>
              <tr>
                <th>id</th>
                <th>1</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Название</td>
                <td>Проверка отправки писем</td>
              </tr>
              <tr>
                <td>Предусловие</td>
                <td>
                  Логин / Пароль : test@mail.ru, qwer1234(первое мыло). Логин /
                  Пароль : test@gmail.com, 1234rewq(второе мыло)
                </td>
              </tr>
              <tr>
                <td>Шаги</td>
                <td>Ожидаемый результат</td>
              </tr>
              <tr>
                <td>Зайти на mail.ru</td>
                <td>Открывается сайт mail.ru</td>
              </tr>
              <tr>
                <td>Aвторизоваться в почте, используя данные предусловия</td>
                <td>Осуществлен вход в почтовый сервис</td>
              </tr>
              <tr>
                <td>Нажать на кнопку "написать письмо"</td>
                <td>Открывается форма нового письма</td>
              </tr>
              <tr>
                <td>Зайти на google.com</td>
                <td>Откывается страница гугла</td>
              </tr>
              <tr>
                <td>Авторизоваться в почте, используя данные предусловия</td>
                <td>Открывается почтовый сервис гугла</td>
              </tr>
              <tr>
                <td>На почте гугла перейти во вкладку входящие</td>
                <td>Открывается форма входящих писем на почте гугла</td>
              </tr>
              <tr>
                <td>
                  Перейти на почту mail.ru. Заполнить адресат, тиму письма,
                  прикрепленный файл, используя входные данные
                </td>
                <td>Заполнные поля согласно входным данным</td>
              </tr>
            </tbody>
          </table>
          <p>
            <b>Входные данные</b>
          </p>
          <table>
            <thead>
              <tr>
                <th>Адресат</th>
                <th>Тема</th>
                <th>Текст письма</th>
                <th>Прикрепленный файл</th>
                <th>Ожидаемый результат</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Гугл почта</td>
                <td>Заказ</td>
                <td>Здравствуйте, я бы хотел уточнить заказ</td>
                <td></td>
                <td>
                  Письмо отправлено, в сходящих сохранилось. Во входящих на
                  почте гугла появилось новое письмо и оно открывается
                </td>
              </tr>
              <tr>
                <td>Гугл почта</td>
                <td></td>
                <td>Здравствуйте, я бы хотел уточнить заказ</td>
                <td></td>
                <td>
                  Вопрос от системы: Вы действительно хотите отправить пустое
                  письмо? В случае согласия, письмо отправлено, в исходящих
                  сохранилось отправленное письмо. Во входящих на почте Гугла
                  пришло и открывается письмо без темы
                </td>
              </tr>
              <tr>
                <td>Гугл почта</td>
                <td>Заказ</td>
                <td>Здравствуйте, я бы хотел уточнить заказ</td>
                <td></td>
                <td>
                  Письмо отправлено, в исходящих сохранилось. Во входящих на
                  почте гугла появилось новос письмо и оно открывается
                </td>
              </tr>
              <tr>
                <td>Гугл почта, почта мейл ру</td>
                <td>Заказ</td>
                <td>Здравствуйте, я бы хотел уточнить заказ</td>
                <td></td>
                <td>
                  Письмо отравлено всем адресатам, в исходящих сохранилось
                </td>
              </tr>
              <tr>
                <td>NoNaNoNe@mail.ru</td>
                <td>Заказ</td>
                <td>Здравствуйте, я бы хотел уточнить заказ</td>
                <td></td>
                <td>Ошибка: присутствует некорректный адрес</td>
              </tr>
              <tr>
                <td></td>
                <td>Заказ</td>
                <td>Здравствуйте, я бы хотел уточнить заказ</td>
                <td></td>
                <td>Ошибка: не указан адрес отправителя</td>
              </tr>
              <tr>
                <td>Гугл почта</td>
                <td>Заказ</td>
                <td>Здравствуйте, я бы хотел уточнить заказ</td>
                <td>Файл в пределах лимита</td>
                <td>Письмо отправлено с вложенным файлом</td>
              </tr>
              <tr>
                <td>Гугл почта</td>
                <td>Заказ</td>
                <td>Здравствуйте, я бы хотел уточнить заказ</td>
                <td>Файл больше допустимого лимита</td>
                <td>
                  Письмо не отправлено. Ошибка: превышен допустимый размер файла
                </td>
              </tr>
            </tbody>
          </table>
          <p>
            <b>Баг репорт</b>
          </p>
          <table>
            <thead>
              <tr>
                <th colSpan="2">Дефект</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Идентификатор</td>
                <td>1</td>
              </tr>
              <tr>
                <td>Краткое описание</td>
                <td>
                  Отправляется вложенный файл в почтовом сервисе при превышении
                  его допустимого значения
                </td>
              </tr>
              <tr>
                <td>Полное описание</td>
                <td>
                  Предусловия: Логин, пароль. В почтом сервисе таком то при
                  отправке письма с файлом, выше допустимого значения, письмо
                  отправляется Шаги:
                  <br /> 1) Зайти на mail.ru
                  <br /> 2) Нажать кнопку "Написать письмо"
                  <br /> 3) Приложить к письму файл, превышающий допустимый
                  размер
                  <br /> 4) Отправить письмо
                  <br /> Ожидаемый результат - Письмо не отправляется, выходит
                  ошибка
                  <br /> Фактический результат - Письмо с вложенным файлом выше
                  допустимого объема
                </td>
              </tr>
              <tr>
                <td>Критичность</td>
                <td>Средняя</td>
              </tr>
              <tr>
                <td>Приоритет</td>
                <td>Средний</td>
              </tr>
              <tr>
                <td>Окружение</td>
                <td>Windows 10, браузер</td>
              </tr>
            </tbody>
          </table>
        </div>
      ),
    },
    'Техники тест дизайна': {
      id: '88',
      title: 'Техники тест дизайна',
      jsx: (
        <div>
          <p>
            <b>Эквивалентное разделение</b> - подразумевает разделение входных
            данных на эквивалентные классы, где данные в одном классе
            обрабатываются одинаково.
          </p>
          <p>
            Пример: <span>для поля ввода возраста (от 0 до 120)</span>
          </p>
          <ul>
            Классы эквивалентности:
            <li>
              <b>Позитивные</b>: 0 - 120
            </li>
            <li>
              <b>Негативные</b>: меньше 0, больше 120, ввод букв
            </li>
          </ul>
          <p>
            <b>Тестовые случаи:</b> проверка одного значения внутри и вне
            допустимого диапазона: -1 (невалидный), 25 (валидный).
          </p>
          <p>
            <b>Анализ граничных значений</b> - тестирование выполняется на
            границах эквивалентных классов, так как ошибки часто происходят на
            краях диапазона.
          </p>
          <p>
            Пример: <span>для поля ввода возраста (от 0 до 120)</span>
          </p>
          <p>
            <b>Гранитные значения</b>: -1, 0, 1, 119, 120, 121
          </p>
          <p>
            <b>Тестовые случаи</b>: проверка значений непосредственно на
            границах и за их пределами: -1 (невалидный), 0 (валидный), 1
            (валидный), 119 (валидный), 120 (валидный), 121(невалидный).
          </p>
          <p>
            <b>Таблица принятия решений</b> - полезна для сложных бизнес правил,
            где разные комбинации входных данных приводят к разным результатам.
          </p>
          <ul>
            Пример: правила скидок:
            <li>Если клиент постоянный и покупка свыше 100$, то скидка 10%</li>
            <li>Если клиент новый и покупка свыше 100$, то скидка 5%</li>
            <li>Во всех остальных случаях не приминяется</li>
          </ul>
          <p>
            <b>Тестовые случаи</b>: создание таблицы с комбинациями входных
            данных и ожидаемыми результатами.
          </p>
          <table>
            <thead>
              <tr>
                <th>Постоянный клиент</th>
                <th>Покупка {'>'} 100$</th>
                <th>Скидка</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Да</td>
                <td>Да</td>
                <td>10$</td>
              </tr>
              <tr>
                <td>Да</td>
                <td>Нет</td>
                <td>0$</td>
              </tr>
              <tr>
                <td>Нет</td>
                <td>Да</td>
                <td>5$</td>
              </tr>
              <tr>
                <td>Нет</td>
                <td>Нет</td>
                <td>0$</td>
              </tr>
            </tbody>
          </table>
          <p>
            <b>Таблица переходов состояний</b> - используется для уменьшения
            числа тестовых случаев путем тестирования всех возможных пар
            комбинаций параметров.
          </p>
          <p>
            Пример: тестирование формы входа с параметрами "Браузер", "ОС",
            "Версия".
          </p>
          <ul>
            Параметры:
            <li>Браузеры: Chrome, Firefox, Safari</li>
            <li>OC: Windows, MacOS, Linux</li>
            <li>Версии: 1.0, 2.0</li>
          </ul>
          <p>
            <b>Тестовые случаи</b>: выбор минимального набора тестов для
            покрытия всех возможных пар комбинаций параметров. В результате
            вместо 18 тестовых случаев получится 9.
          </p>
          <p>
            <b>Таблица переходов состояний</b> - эта техника используется для
            тестирования систем, которые имеют конечные состояния и переходы
            между ними.
          </p>
          <p>Пример: Автомат продажи билетов.</p>
          <p>
            <b>Состояния</b>: "Ожидание монеты", "Ожидание выбора", "Выдача
            билета".
          </p>
          <ul>
            <b>Переходы:</b>
            <li>
              Из "Ожидание монеты" в "Ожидание выбора" при внесении монеты
            </li>
            <li>Из "Ожидание выбора" в "Выдача билета" при выборе билета</li>
          </ul>
          <p>
            <b>Тестовые случаи</b>: Проверка корректности переходов между
            состояниями при различных действиях пользователя.
          </p>
          <ul>
            Другие техники:
            <li>Причинно-следственные связи</li>
            <li>Предугадывание ошибок</li>
            <li>Бисекционное деление</li>
            <li>Декомпозиция</li>
          </ul>
        </div>
      ),
    },
    'Тестирование SQL': {
      id: '89',
      title: 'Тестирование SQL',
      jsx: (
        <div>
          <p>Поиск:</p>
          <pre>
            <div className="numbers">
              <code>1</code>
              <code>2</code>
              <code>3</code>
              <code>4</code>
              <code>5</code>
            </div>
            <code>
              <code>
                <b>SELECT</b> *
              </code>
              <code>
                <b>FROM</b> Products
              </code>
              <code className="comment">// Название базы данных</code>
              <code>
                <b>WHERE</b> {'{...}'}
              </code>
              <code className="comment">// Условие</code>
            </code>
          </pre>
          <p>Добавить:</p>
          <pre>
            <div className="numbers">
              <code>1</code>
              <code>2</code>
              <code>3</code>
              <code>4</code>
              <code>5</code>
              <code>6</code>
            </div>
            <code>
              <code>
                <b>INCERT INTO</b> Products
              </code>
              <code className="comment">// Название базы данных</code>
              <code>(title, price, ...)</code>
              <code className="comment">// Название полей</code>
              <code>
                <b>VALUES</b>
              </code>
              <code>(product1, 100, ...)</code>
            </code>
          </pre>
          <p>Обновить:</p>
          <pre>
            <div className="numbers">
              <code>1</code>
              <code>2</code>
              <code>3</code>
              <code>4</code>
              <code>5</code>
            </div>
            <code>
              <code>
                <b>UPDATE</b> Products
              </code>
              <code className="comment">// Название базы данных</code>
              <code>
                <b>SET</b> price = 200
              </code>
              <code className="comment">// Меняем поле price</code>
              <code>
                <b>WHERE</b> {'{условие}'}
              </code>
            </code>
          </pre>
          <p>Удалить:</p>
          <pre>
            <div className="numbers">
              <code>1</code>
              <code>2</code>
              <code>3</code>
              <code>4</code>
            </div>
            <code>
              <code>
                <b>DELETE</b>
              </code>
              <code>
                <b>FROM</b> Products
              </code>
              <code className="comment">// Название базы данных</code>
              <code>
                <b>WHERE</b> {'{условие}'}
              </code>
            </code>
          </pre>
          <p>
            Ограничение значений - <b>LIMIT</b>
          </p>
          <p>
            Поиск по содержимому - <b>LIKE '%{'{...}'}%'</b>
          </p>
          <p>
            Логические операторы <b>OR</b>, <b>AND</b>
          </p>
          <p>
            Cортировка <b>ORDER BY {'{...}'} (DESK ASC)</b>
          </p>
          <p>
            Диапазон - <b>WHERE price BETWEEN 50 - 150</b>
          </p>
          <p>
            Уникальные значения - <b>DISTINCT</b>
          </p>
        </div>
      ),
    },
  },
}

export default QI
