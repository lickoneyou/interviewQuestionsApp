const HTTP = {
  HTTP: {
    'HTTP basics': {
      id: '21',
      jsx: (
        <div>
          <p>
            <b>HTTP</b> - это гипертекстовый транспортный протокол.
            Первоначально идея <b>HTTP</b> - это обмен гипертекстовыми
            документами <b>HTML</b>, но сейчас с помощью HTTP{' '}
            <span>можно передавать</span> : тексты, файлы, HTML, XML, json.
          </p>
          <ul>
            Структура HTTP:
            <li>
              Первая строчка - это <span>стартовая строка</span>,{' '}
              <b>состоит из 3ех частей</b> :
              <ul>
                <li>Метод</li>
                <li>URL</li>
                <li>Версия HTTP</li>
              </ul>
            </li>
            <li>
              <span>Заголовки.</span> B заголовках указывается информация о
              хосте, с которого был отправлен запрос, информация о браузере,
              типе устройства, с которого отправляется запрос, тип контента,
              например: json, текст. Также могут отправляться различные
              авторизационные заголовки с токенами. С помощью заголовков
              обеспечивается безопасность взаимодействия различных источников в
              сети - <b>CORS заголовки</b>.
            </li>
            <li>
              <span>Тело сообщения</span>. В нем клиент <span>отправляет</span>{' '}
              серверу какие-то данные.
            </li>
          </ul>
        </div>
      ),
    },
    'Методы HTTP запроса': {
      id: '22',
      jsx: (
        <div>
          <ul>
            Методы HTTP:
            <li>
              <b>GET</b> - получение ресурсов
            </li>
            <li>
              <b>POST</b> - передача данных (создание ресурса)
            </li>
            <li>
              <b>PUT</b> - обновление ресурса
            </li>
            <li>
              <b>PATH</b> - обновление фрагмента ресурса (частичное)
            </li>
            <li>
              <b>DELETE</b> - удаление ресурса
            </li>
          </ul>
        </div>
      ),
    },
    'Коды ответа': {
      id: '23',
      jsx: (
        <div>
          <ul>
            Статус коды:
            <li>
              <b>1xx</b> : информационные
            </li>
            <li>
              <b>2xx</b> : успешно
            </li>
            <li>
              <b>3xx</b> : перенаправление
            </li>
            <li>
              <b>4xx</b> : ошибка клиента
            </li>
            <li>
              <b>5xx</b> : ошибка сервера
            </li>
          </ul>
        </div>
      ),
    },
    'HTTP-кеширование': {
      id: '24',
      jsx: (
        <div>
          <p>
            <b>Кэширование</b> - это распространенный метод в современных
            вычислительных системах, для повышения производительности и
            сокращения времени отклика. От внешнего интерфейса до серверной
            части, <b>кэширование</b> играет решающую роль в повышении
            эффективности различных приложений и систем.
          </p>
          <p>
            <b>Веббраузеры</b> могут кэшировать HTTP ответы, чтобы обеспечить
            быстрый поиск данных.
          </p>
          <p>
            Браузеры поддерживают кэширование редко меняющихся данных:{' '}
            <span> изображений, CSS, JS</span>.
          </p>
          <p>
            Чтобы определить можно ли брать страницу из кэша истользуется
            заголовок <b>Expire</b>, в котором указывается до какого времени
            можно хранить ресурс в кэше. Если веб сервер не установил этот
            заголовок, браузер может использовать поле <b>Last-Modifide</b>, в
            котором указана дата последнего изменения ресурса.
          </p>
          <p>
            Протокол HTTP содержит другой подход, который позволяет определить
            измененилась ли страница, для этого клиент должен отправить серверу{' '}
            <b>Conditiolan GET</b>. Клиент передает запрос <b>Get с условием</b>
            , в ответ сервер может сказать, что страница не изменилась, тогда
            браузер берет версию из кэша, а если страница изменилась, то сервер
            передаст измененную версию веб страницы.
          </p>
          <ul>
            Сервер может передать 2 ответа на <b>Conditiolan GET запрос</b> :
            <li>
              Если ресурс не поменялся: статус ответа - <b>304 Not Modified</b>.
              Страница берется из кэша
            </li>
            <li>
              Ресурс изменился: статус ответа: <b>200 OK</b>. Измененная версия
              ресурса передается полностью
            </li>
          </ul>
          <p>
            Еще есть заголовок <b>Cache-Control</b>, который позволяет более
            гибко управлять кэшированием.
          </p>
          <ul>
            Возможные значения:
            <li>
              <b>no-store</b> - ресурс нельзя сохранять в кэш
            </li>
            <li>
              <b>no-cache</b> - ресурс сохранять в кэш можно, но для этого нужно
              отправить <b>Conditiolan GET запрос</b>, а загружать ресурс из
              кэша только если он не изменился на сервере
            </li>
            <li>
              <b>public</b> - говорит о том, что информация доступна всем и ее
              можно кэшировать
            </li>
            <li>
              <b>private</b> - говорит о том, что страница может быть
              сохраненена только в частном кэше браузера
            </li>
            <li>
              <b>max-age</b> - устанавливает время хранения ресурса в кэше в
              секундах
            </li>
          </ul>
        </div>
      ),
    },
    HTTPS: {
      id: '25',
      jsx: (
        <div>
          <p>
            <b>HTTPS</b> - расширение для <b>HTTP</b>, используется для защиты
            информации от перехвата, обеспечивает конфиденциальность данных
            между сайтом и пользователем.
          </p>
          <ul>
            Безопасность информации обеспечивается за счет использования
            криптографических протоколов <b>SSL</b> и <b>TLS</b> с такими
            уровнями защиты:
            <li>
              <b>Шифрование данных</b>: позволяет избежать перехвата
            </li>
            <li>
              <b>Сохранение данных</b>: любое изменение данных фиксируется
            </li>
            <li>
              <b>Аутентификация</b>: защищает от перенаправления пользователя
            </li>
          </ul>
          <ul>
            На <b>HTTPS</b> лучше перейти если:
            <li>Сайт проводит платежи</li>
            <li>
              Сайт использует личные данные пользователя (например паспорт)
            </li>
          </ul>
          <p>
            Для избежания перехвата данных третьими лицами используется{' '}
            <b>цифровой сертификат</b> - электронный документ, который
            идентифицирует сервер.
          </p>
          <p>
            В сертификате указываются <span>данные владельца и подпись</span>.
          </p>
          <ul>
            Сертификат подтверждает, что:
            <li>Лицо, которому выдан сертификат, действительно существует</li>
            <li>
              Лицо является владельцем сервера (сайта) указанного в сертификате
            </li>
          </ul>
        </div>
      ),
    },
    CORS: {
      id: '26',
    },
    WebSocket: {
      id: '27',
    },
    'HTTP-куки': {
      id: '28',
    },
  },
}

export default HTTP
