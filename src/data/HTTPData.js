const HTTP = {
  HTTP: {
    'HTTP basics': {
      id: '21',
      title: 'HTTP basics',
      jsx: (
        <div>
          <p>
            <b>HTTP</b> - это гипертекстовый транспортный протокол.
            Первоначально идея <b>HTTP</b> - это обмен гипертекстовыми
            документами <b>HTML</b>, но сейчас с помощью HTTP{' '}
            <span>можно передавать</span> : тексты, файлы, HTML, XML, json.
          </p>
          <ul>
            Структура HTTP:
            <li>
              Первая строчка - это <span>стартовая строка</span>,{' '}
              <b>состоит из 3ех частей</b> :
              <ul>
                <li>Метод</li>
                <li>URL</li>
                <li>Версия HTTP</li>
              </ul>
            </li>
            <li>
              <span>Заголовки.</span> B заголовках указывается информация о
              хосте, с которого был отправлен запрос, информация о браузере,
              типе устройства, с которого отправляется запрос, тип контента,
              например: json, текст. Также могут отправляться различные
              авторизационные заголовки с токенами. С помощью заголовков
              обеспечивается безопасность взаимодействия различных источников в
              сети - <b>CORS заголовки</b>.
            </li>
            <li>
              <span>Тело сообщения</span>. В нем клиент <span>отправляет</span>{' '}
              серверу какие-то данные.
            </li>
          </ul>
        </div>
      ),
    },
    'Методы HTTP запроса': {
      id: '22',
      title: 'Методы HTTP запроса',
      jsx: (
        <div>
          <ul>
            Методы HTTP:
            <li>
              <b>GET</b> - получение ресурсов
            </li>
            <li>
              <b>POST</b> - передача данных (создание ресурса)
            </li>
            <li>
              <b>PUT</b> - обновление ресурса
            </li>
            <li>
              <b>PATCH</b> - обновление фрагмента ресурса (частичное)
            </li>
            <li>
              <b>DELETE</b> - удаление ресурса
            </li>
            <li>
              <b>HEAD</b> - позволяет получить только заголовки
            </li>
            <li>
              <b>OPTIONS</b> - позволяет запросить информацию о сервере, в том
              числе информацию о допускаемых к использованию на сервере HTTP
              методов
            </li>
            <li>
              <b>CONNECT</b> - можно использовать каждый раз, когда нужно
              посмотреть, что просходит с HTTP ресурсом. Это может помочь при
              тестировании безопасности и при любом использовании прокси
            </li>
            <li>
              <b>TRACE</b> - похож на <b>CONNECT</b>, он тоже соединяется с
              ресурсом, но он также пытается получить от него ответ. Это нужно
              для тестирования безопасности. В ответе получаем исходный код
              страницы и его можно иследовать в поиске куки или заголовков
              аутентификации, которыми может воспользоваться злоумышленник
            </li>
          </ul>
        </div>
      ),
    },
    'Коды ответа': {
      id: '23',
      title: 'Коды ответа',
      jsx: (
        <div>
          <ul>
            Статус коды:
            <li>
              <b>1xx</b> : информационные
            </li>
            <li>
              <b>2xx</b> : успешно
            </li>
            <li>
              <b>3xx</b> : перенаправление
            </li>
            <li>
              <b>4xx</b> : ошибка клиента
            </li>
            <li>
              <b>5xx</b> : ошибка сервера
            </li>
          </ul>
        </div>
      ),
    },
    'HTTP-кеширование': {
      id: '24',
      title: 'HTTP-кеширование',
      jsx: (
        <div>
          <p>
            <b>Кэширование</b> - это распространенный метод в современных
            вычислительных системах, для повышения производительности и
            сокращения времени отклика. От внешнего интерфейса до серверной
            части, <b>кэширование</b> играет решающую роль в повышении
            эффективности различных приложений и систем.
          </p>
          <p>
            <b>Веббраузеры</b> могут кэшировать HTTP ответы, чтобы обеспечить
            быстрый поиск данных.
          </p>
          <p>
            Браузеры поддерживают кэширование редко меняющихся данных:{' '}
            <span> изображений, CSS, JS</span>.
          </p>
          <ul>
            <b>Кэширование</b> можно разделить на 2 группы:
            <li>
              <b>Клиентское кэширование</b> - когда данные кэшируются на стороне
              пользователя, в его браузере. Примером могут служить
              статистические файлы: <span> изображения, CSS, JS</span>
            </li>
            <li>
              <b>Серверное кэширование</b> - когда данные кэшируются на стороне
              сервера. Примером могут служить кэширование результатов запросов к
              базе данных или генерация статических HTML страниц на основе
              динамического контента
            </li>
          </ul>
          <p>
            Чтобы определить можно ли брать страницу из кэша истользуется
            заголовок <b>Expire</b>, в котором указывается до какого времени
            можно хранить ресурс в кэше. Если веб сервер не установил этот
            заголовок, браузер может использовать поле <b>Last-Modifide</b>, в
            котором указана дата последнего изменения ресурса.
          </p>
          <p>
            Протокол HTTP содержит другой подход, который позволяет определить
            измененилась ли страница, для этого клиент должен отправить серверу{' '}
            <b>Conditiolan GET</b>. Клиент передает запрос <b>Get с условием</b>
            , в ответ сервер может сказать, что страница не изменилась, тогда
            браузер берет версию из кэша, а если страница изменилась, то сервер
            передаст измененную версию веб страницы.
          </p>
          <ul>
            Сервер может передать 2 ответа на <b>Conditiolan GET запрос</b> :
            <li>
              Если ресурс не поменялся: статус ответа - <b>304 Not Modified</b>.
              Страница берется из кэша
            </li>
            <li>
              Ресурс изменился: статус ответа: <b>200 OK</b>. Измененная версия
              ресурса передается полностью
            </li>
          </ul>
          <p>
            Еще есть заголовок <b>Cache-Control</b>, который позволяет более
            гибко управлять кэшированием.
          </p>
          <ul>
            Возможные значения:
            <li>
              <b>no-store</b> - ресурс нельзя сохранять в кэш
            </li>
            <li>
              <b>no-cache</b> - ресурс сохранять в кэш можно, но для этого нужно
              отправить <b>Conditiolan GET запрос</b>, а загружать ресурс из
              кэша только если он не изменился на сервере
            </li>
            <li>
              <b>public</b> - говорит о том, что информация доступна всем и ее
              можно кэшировать
            </li>
            <li>
              <b>private</b> - говорит о том, что страница может быть
              сохраненена только в частном кэше браузера
            </li>
            <li>
              <b>max-age</b> - устанавливает время хранения ресурса в кэше в
              секундах
            </li>
          </ul>
        </div>
      ),
    },
    HTTPS: {
      id: '25',
      title: 'HTTPS',
      jsx: (
        <div>
          <p>
            <b>HTTPS</b> - расширение для <b>HTTP</b>, используется для защиты
            информации от перехвата, обеспечивает конфиденциальность данных
            между сайтом и пользователем.
          </p>
          <ul>
            Безопасность информации обеспечивается за счет использования
            криптографических протоколов <b>SSL</b> и <b>TLS</b> с такими
            уровнями защиты:
            <li>
              <b>Шифрование данных</b>: позволяет избежать перехвата
            </li>
            <li>
              <b>Сохранение данных</b>: любое изменение данных фиксируется
            </li>
            <li>
              <b>Аутентификация</b>: защищает от перенаправления пользователя
            </li>
          </ul>
          <ul>
            На <b>HTTPS</b> лучше перейти если:
            <li>Сайт проводит платежи</li>
            <li>
              Сайт использует личные данные пользователя (например паспорт)
            </li>
          </ul>
          <p>
            Для избежания перехвата данных третьими лицами используется{' '}
            <b>цифровой сертификат</b> - электронный документ, который
            идентифицирует сервер.
          </p>
          <p>
            В сертификате указываются <span>данные владельца и подпись</span>.
          </p>
          <ul>
            Сертификат подтверждает, что:
            <li>Лицо, которому выдан сертификат, действительно существует</li>
            <li>
              Лицо является владельцем сервера (сайта) указанного в сертификате
            </li>
          </ul>
          <ul>
            Как происходит HTTPS соединение:
            <li>
              Браузер передает на сервер список всех доступных ему алгоритмов
              шифродания (<b>симетричное</b>, <b>ассиметричное</b>,{' '}
              <b>хеш-функции</b>)
            </li>
            <li>
              Сервер выбирает алгоритм и передает в браузер{' '}
              <b>публичный ключ</b> и <b>сертификат</b>
            </li>
          </ul>
          <p>
            <b>Публичный ключ</b> - служит для того чтобы клиенты отправляя
            данные на сервер могли зашифровать свое данные, чтобы злоумышленник
            не смог их прочитать.{' '}
            <span>Перехватить можно, прочитать нельзя</span>.
          </p>
          <p>
            <b>Приватный ключ</b> - служит для чтения этих данных.
          </p>
        </div>
      ),
    },
    CORS: {
      id: '26',
      title: 'CORS',
      jsx: (
        <div>
          <p>
            <b>CORS</b> - это механизм, который позволяет выполненным скриптам в
            браузере взаимодействовать с ресурсами, имеющими{' '}
            <span>разный origin</span>.
          </p>
          <ul>
            Под <span>разным origin</span> подразумеваются запросы, которые
            имеют разные URL по сравнению с URL, где выполняется JavaScript
            <li>Разный домен</li>
            <li>Разный протокол</li>
            <li>Разный порт</li>
          </ul>
          <p>
            <b>CORS</b> настраивается на стороне back-end через заголовки.
          </p>
          <ul>
            <b>CORS-заголовки</b> - это обычные заголовки HTTP, которые
            используются для контроля политики CORS. Они используются, когда
            браузер отправляет предварительный CORS-запрос на сервер, на который
            сервер отвечает следующими заголовками:
            <li>
              <b>Access-Control-Allow-Origin</b> указывает, какой источник может
              получать ресурсы. Вы можете указать один или несколько источников
              через запятую
            </li>
            <li>
              <b>Access-Control-Allow-Methods</b> указывает, какие HTTP-методы
              разрешены. Вы можете указать один или несколько HTTP-методов через
              запятую
            </li>
            <li>
              <b>Access-Control-Allow-Headers</b> указывает, какие заголовки
              запросов разрешены. Вы можете указать один или несколько
              заголовков через запятую
            </li>
            <li>
              <b>Access-Control-Allow-Credentials</b> указывает, разрешена ли
              отправка файлов <b>cookie</b>. По умолчанию: <b>false</b>
            </li>
            <li>
              <b>Access-Control-Max-Age</b> указывает в секундах, как долго
              должен кэшироваться результат запроса. По умолчанию: <b>0</b>
            </li>
          </ul>
        </div>
      ),
    },
    WebSocket: {
      id: '27',
      title: 'WebSocket',
      jsx: (
        <div>
          <p>
            <b>WebSocket</b> - это протокол, но в отличии от HTTP, где
            устанавливается связь, получается ответ и связь обрыватся, здесь
            устанавливается <b>постоянное подключение</b>.
          </p>
          <p>Используется в чатах, графиках, курсах валют, биржах.</p>
        </div>
      ),
    },
    'HTTP-куки': {
      id: '28',
      title: 'HTTP-куки',
      jsx: (
        <div>
          <p>
            <b>Cookies</b> - это небольшие данные в формате ключ-значение,
            которые хранятся в браузере. Это способ хранения данных о
            пользователе после разрыва соединения.
          </p>
          <p>
            <b>Данные</b> сookies хранятся в виде <span>строки</span>.
          </p>
          <p>
            Инфорамция для хранения должна быть до <b>4kb</b>.
          </p>
          <ul>
            В <b>cookies</b> хранится:
            <li>Имя, логин пользователя</li>
            <li>Информация о том, что пользователь посещал сайт раньше</li>
            <li>Служебные данные для работы скриптов</li>
          </ul>
          <p>
            <b>Cookies</b> хранятся в браузере и передаются в запросе к серверу.
          </p>
          <p>
            Пользователь может очистить <b>cookies</b> в любое время.
          </p>
          <p>
            Файл <b>cookies</b> может изменятся как <span>сервером</span> так и{' '}
            <span>браузером</span>.
          </p>
        </div>
      ),
    },
    'Критические этапы загрузки страницы': {
      id: '29',
      title: 'Критические этапы загрузки страницы',
      jsx: (
        <div>
          <ul>
            <li>
              Изначально браузер проверяет <b>cache</b> и <b>local host</b>,
              если данных нет, браузер идет в <b>Local DNS</b> (Domain Name
              Serves)
            </li>
            <li>
              DNS идет в <b>Root Server</b>, он возвращает адрес{' '}
              <b>top level damain (TLD)</b>: .ru, .com, .by и тд
            </li>
            <li>
              TLD возвращает <b>хостовый сервер</b>
            </li>
            <li>
              Local DNS делает запрос в хостовый сервер, он возвращает{' '}
              <b>ip адрес</b>
            </li>
            <li>
              Если с сервером все ок, DNS сохраняет адрес в кэш и отдает его в
              браузер
            </li>
          </ul>
        </div>
      ),
    },
    Идемпотентность: {
      id: '210',
      title: 'Идемпотентность',
      jsx: (
        <div>
          <p>
            <b>Идемпотентность</b> - это свойсивр операции, при котором ее
            повторное применение к ресурсу не приводит к изменению его
            состояния. Другими словами, если вы выполняете идемпотентную
            операцию несколько раз, состояние ресурса будет таким же, как при
            единовременном выполнении, в противном случае операция является{' '}
            <b>не идемпотентной</b>.
          </p>
          <p>
            <b>Идемпотентными</b> являются методы HTTP: <b>GET</b>, <b>PUT</b>,{' '}
            <b>DELETE</b>, <b>HEAD</b>, <b>OPTIONS</b>, <b>TRACE</b>,{' '}
            <b>CONNECT</b>, потому что повторный вызов любого из этих запросов с
            теми же данными и URL приведет к тому же состоянию ресурса, что и
            при первом запросе.
          </p>
          <p>
            К <b>не идемпотентным</b> запросам относятся <b>POST</b> и{' '}
            <b>PATCH</b>, т.к повторный вызов идентичных запросов может привести
            к изменениям состояния ресурса.
          </p>
        </div>
      ),
    },
    'Безопасные методы': {
      id: '211',
      title: 'Безопасные методы',
      jsx: (
        <div>
          <p>
            Безопасные методы: <b>GET</b>, <b>CONNECT</b>, <b>HEAD</b>,{' '}
            <b>OPTIONS</b>, <b>TRACE</b> - не изменяют данные, их можно
            выполнять в любой последовательности (<b>только для чтения</b>).
          </p>
        </div>
      ),
    },
  },
}

export default HTTP
